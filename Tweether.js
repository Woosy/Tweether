// DEBUG : Permet de voir quand le bot d√©marre
console.log("Tweether 1.0-1 is starting... \n\n");


// On v√©rifie que les packages sont bien install√©s :
var Twit = require('twit');
var getJSON = require('get-json')
// On v√©rifie tout les fichiers de codes sont bien pr√©sents :
var login = require('./login');
// On d√©clare l'instance du bot avec les logins situ√©s dans le fichier config
var T = new Twit(login);




// Messages d'erreur :
error = "\n\n‚ö†Ô∏è Une erreur est survenue lors de l'envoie de votre bulletin m√©t√©o !\n\n‚ö†Ô∏è Si le probl√®me persiste, merci de contacter @ Woosy__\nüìù https://github.com/Woosy/Tweether/issues/new";
errorNoLoc = "\n\n‚ö†Ô∏è Une erreur est survenue lors de l'envoie de votre bulletin m√©t√©o !\n‚ö†Ô∏è Vous n'avez pas d√©fini de localisation sur votre page de profil !\n\n‚ö†Ô∏è Si le probl√®me persiste, merci de contacter @ Woosy__\nüìù https://github.com/Woosy/Tweether/issues/new";
errorInvalidLoc = "\n\n‚ö†Ô∏è Une erreur est survenue lors de l'envoie de votre bulletin m√©t√©o !\n‚ö†Ô∏è Veuillez indiquer une localisation valide !\n\n‚ö†Ô∏è Si le probl√®me persiste, merci de contacter @ Woosy__\nüìù https://github.com/Woosy/Tweether/issues/new";






// Lancement du script
main();


// Fonction principale :
function main() {

  // Screen_name du bot :
  var id = {
    user_id: "Tweether01"
  }


  // Listing des followers du bot :
  T.get('followers/list', id, gotData);

  function gotData(err, data, response) {
    // DEBUG : V√©rification erreur sur la requ√™te GET :
    if (err) {
      console.log("ERREUR : Get followers list : " + err);

      // Pas d'erreur :
    } else {

      // On boucle sur chaque followers du bot :
      for (var i = 0; i < data.users.length; i++) {

        // On v√©rifie que sa location est bien d√©finie :
        if (data.users[i].location.length != 0) {

          // On transmet location & screen_name :
          whatsTheWeatherIn(data.users[i].location, data.users[i].screen_name);

          // Si la location n'est pas d√©finie :
        } else {

          // DEBUG :
          console.log("Pas de location d√©finie pour : " + data.users[i].screen_name + "\n\n\n");
          whatsTheWeatherIn("noloc", data.users[i].screen_name);

        }

      }

    }
  }

}


// R√©cup√©ration de la m√©t√©o :
function whatsTheWeatherIn(location, user) {


  // Si la localisation est bien mise en place :
  if (location != "noloc") {


    // Traitement "location" & transformation en ville + pays :
    var temp = location.split(", ");
    var city = temp[0];
    var country = temp[1];



    // Chargement du lien :
    getJSON('http://api.openweathermap.org/data/2.5/forecast?q=' + city + ',' + country + '&units=metric&APPID=8445323e2d375eef7e097a6617b4af68', function(error, response){

      // On v√©rifire que l'on re√ßoit bien les donn√©es :
      if (error != null) {


        // Envoie d'un tweet d'erreur cibl√© :
        console.log("@" + user + errorInvalidLoc + "\n\n\n");
        tweetIt("@" + user + errorInvalidLoc);


        // Les donne√©s ont bien √©t√© re√ßues :
      } else {

        // Fonction servant au calcul de l'heure actuelle :
        function addZero(i) {
            if (i < 10) {
                i = "0" + i;
            } return i;
        }

        // Construction du message :
        meteoTime = new Date();
        meteoTime = addZero(meteoTime.getHours()) + "h" + addZero(meteoTime.getMinutes());
        meteoCity = response.city.name;
        meteoCurrTemp = response.list[0].main.temp;
        meteoMinTemp = response.list[0].main.temp_min;
        meteoMaxTemp = response.list[0].main.temp_max;
        meteoClouds = response.list[0].clouds.all;
        meteoHumidity = response.list[0].main.humidity;
        meteoWindSpeed = response.list[0].wind.speed;

        // Traduction de la description :
        switch (response.list[0].weather[0].description) {

          // Group 2XX : Thunderstorm
          case "thunderstorm with light rain":
            meteoDesc = "Orage avec l√©g√®res averses";
          break;

          case "thunderstorm with rain":
            meteoDesc = "Orage avec pluie";
          break;

          case "thunderstorm with heavy rain":
            meteoDesc = "Orage avec grosses averses";
          break;

          case "light thunderstorm":
            meteoDesc = "Orage l√©ger";
          break;

          case "thunderstorm":
            meteoDesc = "Orage";
          break;

          case "heavy thunderstorm":
            meteoDesc = "Gros orage";
          break;

          case "ragged thunderstorm":
            meteoDesc = "Orage irr√©gulier";
          break;

          case "thunderstorm with light drizzle":
            meteoDesc = "Orage avec l√©g√®re bruine";
          break;

          case "thunderstorm with drizzle":
            meteoDesc = "Orage avec bruine";
          break;

          case "thunderstorm with heavy drizzle":
            meteoDesc = "Orage avec bruine a forte intensit√©";
          break;



          // Group 3XX : Drizzle
          case "light intensity drizzle":
            meteoDesc = "Bruine l√©g√®re";
          break;

          case "drizzle":
            meteoDesc = "Bruine";
          break;

          case "heavy intensity drizzle":
            meteoDesc = "Bruine a forte intensit√©";
          break;

          case "light intensity drizzle rain":
            meteoDesc = "Bruine l√©g√®re et pluie";
          break;

          case "drizzle rain":
            meteoDesc = "Bruine et pluie";
          break;

          case "heavy intensity drizzle rain":
            meteoDesc = "Bruine a forte intensit√© et pluie";
          break;

          case "shower rain and drizzle":
            meteoDesc = "Bruine a forte intensit√© et pluie";
          break;

          case "heavy shower rain and drizzle":
            meteoDesc = "Bruine a forte intensit√© et grosses averses";
          break;

          case "shower drizzle":
            meteoDesc = "Bruine a forte intensit√©";
          break;





          // Group 5XX : rain
          case "light rain":
            meteoDesc = "L√©g√®res averses";
          break;

          case "moderate rain":
            meteoDesc = "Averses mod√©r√©es";
          break;

          case "heavy intensity rain":
            meteoDesc = "Averses";
          break;

          case "very heavy rain":
            meteoDesc = "Grosses averses";
          break;

          case "Extreme rain":
            meteoDesc = "Averses extremes";
          break;

          case "freezing rain":
            meteoDesc = "Pluie gel√©e";
          break;

          case "light intensity shower rain":
            meteoDesc = "L√©g√®res averses";
          break;

          case "shower rain":
            meteoDesc = "Averses mod√©r√©es";
          break;

          case "heavy intensity shower rain":
            meteoDesc = "Grosses averses";
          break;

          case "ragged shower rain":
            meteoDesc = "Pluie intermittente";
          break;


          // Group 6XX : Snow
          case "light snow":
            meteoDesc = "Faibles tomb√©es de neige";
          break;

          case "snow":
            meteoDesc = "Averses neigeuses";
          break;

          case "heavy snow":
            meteoDesc = "Grosses averses neigeuses";
          break;

          case "sleet":
            meteoDesc = "Averses de neige fondue";
          break;

          case "shower sleet":
            meteoDesc = "Grosses averses de neige fondue";
          break;

          case "light rain and snow":
            meteoDesc = "Faible m√©lange pluie/neige";
          break;

          case "rain and snow":
            meteoDesc = "M√©lange pluie/neige";
          break;

          case "light shower snow":
            meteoDesc = "Faible averses neigeuses";
          break;

          case "shower snow":
            meteoDesc = "Averses neigeuses";
          break;

          case "heavy shower snow":
            meteoDesc = "Grosses averses neigeuses";
          break;



          // Group 7XX : Atmosphere
          case "mist":
            meteoDesc = "Brume";
          break;

          case "smoke":
            meteoDesc = "Fum√©e";
          break;

          case "haze":
            meteoDesc = "Brume";
          break;

          case "sand, dust whirls":
            meteoDesc = "Tourbillons de poussi√®re";
          break;

          case "fog":
            meteoDesc = "Brouillard";
          break;

          case "sand":
            meteoDesc = "Sable";
          break;

          case "volcanic ash":
            meteoDesc = "Poussi√®re volcanique";
          break;

          case "squalls":
            meteoDesc = "Bourrasques";
          break;

          case "tornado":
            meteoDesc = "Tornades";
          break;


          // Group 80X : Clear & Clouds
          case "clear sky":
            meteoDesc = "Ciel d√©gag√©";
          break;

          case "few clouds":
            meteoDesc = "Ciel peu nuageux";
          break;

          case "scattered clouds":
            meteoDesc = "Nuages dispers√©s";
          break;

          case "broken clouds":
            meteoDesc = "Nuages dispers√©s";
          break;

          case "overcast clouds":
            meteoDesc = "Ciel couvert";
          break;


          // Group 90X : Extreme
          case "tornado":
            meteoDesc = "Tornades";
          break;

          case "tropical storm":
            meteoDesc = "Temp√™te tropicale";
          break;

          case "hurricane":
            meteoDesc = "Ouragan";
          break;

          case "cold":
            meteoDesc = "Froid";
          break;

          case "hot":
            meteoDesc = "Chaud";
          break;

          case "windy":
            meteoDesc = "Venteux";
          break;

          case "hail":
            meteoDesc = "Gr√™le";
          break;


          // AUTRES
          default:
            meteoDesc = 'ERREUR ! Description inconnue...';
        }

        // Traduction de l'angle de provenance du vent en direction :
        temp = response.list[0].wind.deg;
        if ((temp >= 0) && (temp < 22.5)) {
            meteoWindDir = "‚¨áÔ∏è Nord";
          } else if ((temp >= 22.5) && (temp <= 67.5)) {
            meteoWindDir = "‚ÜôÔ∏è Nord-Est";
          } else if ((temp > 67.5) && (temp < 112.5)) {
            meteoWindDir = "‚¨ÖÔ∏è Est";
          } else if ((temp >= 112.5) && (temp <= 157.5)) {
            meteoWindDir = "‚ÜñÔ∏è Sud-Est";
          } else if ((temp > 157.5) && (temp < 202.5)) {
            meteoWindDir = "‚¨ÜÔ∏è Sud";
          } else if ((temp >= 202.5) && (temp <= 247.5)) {
            meteoWindDir = "‚ÜóÔ∏è Sud-Ouest";
          } else if ((temp > 247.5) && (temp < 292.5)) {
            meteoWindDir = "‚û°Ô∏è Ouest";
          } else if ((temp >= 292.5) && (temp <= 337.5)) {
            meteoWindDir = "‚ÜòÔ∏è Nord-Ouest";
          } else if ((temp > 337.5) && (temp <= 360)) {
            meteoWindDir = "‚¨áÔ∏è Nord";
          } else {
            meteoWindDir = "Erreur !";
        }


        // Construction du message :
        meteo = "@" + user + "\n\nüå¶Ô∏è M√©t√©o, " + meteoTime + " √† " + meteoCity + " : " + meteoDesc + "\n\n"
              + "üå°Ô∏è Actuellement : " + meteoCurrTemp + "¬∞C\n"
              + "üå°Ô∏è Min : " + meteoMinTemp + "¬∞C - Max : " + meteoMaxTemp + "¬∞C\n"
              + "‚òÅÔ∏è Couvert √† : " + meteoClouds + "%\n"
              + "üíß Humidit√© : " + meteoHumidity + "%\n"
              + "üå™Ô∏è " + meteoWindSpeed + " km/h - " + meteoWindDir;


        // Si il n'y a pas d'erreur :
        if (meteo.indexOf("ERREUR") == -1) {

          // Envoie du Tweet :
          console.log(meteo + "\n\n\n");
          tweetIt(meteo);

          // Si le tweet contient une erreur :
        } else {

          // Envoie d'un tweet d'erreur :
          console.log("@" + user + error + "\n\n\n");
          tweetIt("@" + user + error);

        }

      }


    })



    // Si la localisation n'est pas activ√©e :
  } else {

    // Envoie message d'erreur : activer localisation
    tweetIt("@" + user + errorNoLoc);

  }


}






// Envoie du tweet :
function tweetIt(meteo) {

  // Tweet a envoyer :
  var tweet = {
    status: meteo
  }


  // Construction du tweet via  l'API de Twit :
  T.post('statuses/update', tweet, posted);


  // Callback (debug) :
  function posted(err, data, response) {
    if (err) {
      console.log("Le tweet n'a pas √©t√© envoy√© : " + err + "\n\n============================\n\n");
    } else {
      console.log("Le tweet a bien √©t√© envoy√© !");
    }
  }

}
